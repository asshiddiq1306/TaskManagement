@page "/users"
@using TaskManagement.Web.Services
@using TaskManagement.Application.DTOs
@inject UserApiService UserApi
@inject TaskApiService TaskApi
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Users - Task Management</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Users Management</h1>
    <button class="btn btn-primary" @onclick="OpenCreateModal">
        <i class="bi bi-person-plus"></i> Create New User
    </button>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <!-- Search Control -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row">
                <div class="col-md-8">
                    <label class="form-label">Search Users:</label>
                    <input type="text" class="form-control" placeholder="Search by name or email..." @bind="searchTerm" @oninput="OnSearchChanged" />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                        <i class="bi bi-arrow-clockwise"></i> Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card">
        <div class="card-body">
            @if (filteredUsers.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Created At</th>
                                <th>Tasks</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in filteredUsers)
                            {
                                <tr>
                                    <td>
                                        <strong>@user.Name</strong>
                                    </td>
                                    <td>
                                        <span class="text-muted">@user.Email</span>
                                    </td>
                                    <td>
                                        <span class="text-muted">@user.CreatedAt.ToString("MMM dd, yyyy")</span>
                                    </td>
                                    <td>
                                        @if (user.TaskCount > 0)
                                        {
                                            <div class="task-summary-wrapper">
                                                <button class="btn btn-link p-0 task-summary-button d-flex align-items-center"
                                                        @onclick="() => ToggleUserTasks(user.Id)"
                                                        disabled="@(loadingTasks.Contains(user.Id))">

                                                    <span class="badge bg-info me-2">@user.TaskCount tasks</span>

                                                    <span class="expand-icon @(expandedUserIds.Contains(user.Id) ? "expanded" : "")">
                                                        @if (loadingTasks.Contains(user.Id))
                                                        {
                                                            <i class="bi bi-hourglass-split"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-chevron-down"></i>
                                                        }
                                                    </span>
                                                </button>
                                            </div>

                                            @if (expandedUserIds.Contains(user.Id) && userTasks.ContainsKey(user.Id))
                                            {
                                                <div class="task-details mt-2" data-user-id="@user.Id">
                                                    @if (userTasks[user.Id].Any())
                                                    {
                                                        @foreach (var (task, index) in userTasks[user.Id].Select((task, index) => (task, index)))
                                                        {
                                                            <div class="task-item mb-1 p-2 border rounded bg-light"
                                                                 style="animation-delay: @(index * 0.1)s;">
                                                                <div class="d-flex justify-content-between align-items-start">
                                                                    <div class="task-info">
                                                                        <div class="fw-bold text-truncate" style="max-width: 200px;" title="@task.Title">
                                                                            @task.Title
                                                                        </div>
                                                                        <div class="task-meta">
                                                                            <span class="badge @GetStatusBadgeClass(task.Status) me-1">@task.Status</span>
                                                                            <span class="badge @GetPriorityBadgeClass(task.Priority) me-1">@task.Priority</span>
                                                                            @if (task.DueDate.HasValue)
                                                                            {
                                                                                <small class="text-muted">
                                                                                    Due: @task.DueDate.Value.ToString("MMM dd, yyyy")
                                                                                    @if (task.IsOverdue)
                                                                                    {
                                                                                        <span class="text-danger ms-1">(Overdue)</span>
                                                                                    }
                                                                                </small>
                                                                            }
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <div class="text-muted fst-italic">No tasks found</div>
                                                    }
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">No tasks</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => DeleteUser(user)"
                                                    disabled="@(user.TaskCount > 0)"
                                                    title="@(user.TaskCount > 0 ? "Cannot delete user with assigned tasks" : "Delete user")">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Summary Info -->
                <div class="mt-3">
                    <small class="text-muted">
                        Showing @filteredUsers.Count of @users.Count users
                    </small>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-people" style="font-size: 3rem; color: #ccc;"></i>
                    <h4 class="mt-3 text-muted">No users found</h4>
                    <p class="text-muted">@(users.Any() ? "Try adjusting your search" : "Create your first user to get started")</p>
                    @if (!users.Any())
                    {
                        <button class="btn btn-primary" @onclick="OpenCreateModal">
                            <i class="bi bi-person-plus"></i> Create First User
                        </button>
                    }
                </div>
            }
        </div>
    </div>
}

<!-- Create User Modal -->
<UserCreateModal IsVisible="showCreateModal"
                 IsProcessing="isProcessing"
                 UserModel="createUserModel"
                 OnClose="CloseCreateModal"
                 OnSubmit="HandleCreateUser" />

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(message))
{
    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1200;">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <i class="bi @(isSuccess ? "bi-check-circle text-success" : "bi-exclamation-triangle text-danger")"></i>
                <strong class="me-auto ms-2">@(isSuccess ? "Success" : "Error")</strong>
                <button type="button" class="btn-close" @onclick="ClearMessage"></button>
            </div>
            <div class="toast-body">
                @message
            </div>
        </div>
    </div>
}

@code {
    private List<UserResponseDto> users = new();
    private List<UserResponseDto> filteredUsers = new();
    private bool isLoading = true;
    private string message = string.Empty;
    private bool isSuccess = false;
    private string searchTerm = string.Empty;

    // Modal states
    private bool showCreateModal = false;
    private bool isProcessing = false;

    // User model
    private CreateUserDto createUserModel = new();

    // Task expansion states
    private Dictionary<int, List<TaskResponseDto>> userTasks = new();
    private HashSet<int> expandedUserIds = new();
    private HashSet<int> loadingTasks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            users = await UserApi.GetAllUsersAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading data: {ex.Message}", false);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredUsers = users.ToList();

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredUsers = filteredUsers.Where(u =>
                u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        ApplyFilters();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilters();
    }

    // Task expansion methods
    private async Task ToggleUserTasks(int userId)
    {
        if (expandedUserIds.Contains(userId))
        {
            // Collapse
            expandedUserIds.Remove(userId);
        }
        else
        {
            // Expand
            expandedUserIds.Add(userId);

            // Load tasks if not already loaded
            if (!userTasks.ContainsKey(userId))
            {
                await LoadUserTasks(userId);
            }
        }
    }

    private async Task LoadUserTasks(int userId)
    {
        loadingTasks.Add(userId);
        StateHasChanged();

        try
        {
            var tasks = await TaskApi.GetTasksByUserAsync(userId);
            userTasks[userId] = tasks;
        }
        catch (Exception ex)
        {
            ShowMessage($"Error loading tasks for user: {ex.Message}", false);
            userTasks[userId] = new List<TaskResponseDto>();
        }
        finally
        {
            loadingTasks.Remove(userId);
            StateHasChanged();
        }
    }

    // Badge styling methods
    private string GetStatusBadgeClass(TaskManagement.Domain.Enums.TaskStatus status)
    {
        return status switch
        {
            TaskManagement.Domain.Enums.TaskStatus.Pending => "bg-warning text-dark",
            TaskManagement.Domain.Enums.TaskStatus.InProgress => "bg-info text-white",
            TaskManagement.Domain.Enums.TaskStatus.Completed => "bg-success text-white",
            TaskManagement.Domain.Enums.TaskStatus.Cancelled => "bg-secondary text-white",
            _ => "bg-light text-dark"
        };
    }

    private string GetPriorityBadgeClass(TaskManagement.Domain.Enums.TaskPriority priority)
    {
        return priority switch
        {
            TaskManagement.Domain.Enums.TaskPriority.Low => "bg-secondary text-white",
            TaskManagement.Domain.Enums.TaskPriority.Medium => "bg-primary text-white",
            TaskManagement.Domain.Enums.TaskPriority.High => "bg-warning text-dark",
            TaskManagement.Domain.Enums.TaskPriority.Critical => "bg-danger text-white",
            _ => "bg-light text-dark"
        };
    }

    private void ShowMessage(string msg, bool success)
    {
        message = msg;
        isSuccess = success;
        StateHasChanged();

        // Auto-hide after 3 seconds
        _ = Task.Delay(3000).ContinueWith(_ =>
        {
            message = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private void ClearMessage()
    {
        message = string.Empty;
    }

    // Create Modal Methods
    private void OpenCreateModal()
    {
        createUserModel = new CreateUserDto();
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        createUserModel = new CreateUserDto();
    }

    private async Task HandleCreateUser(CreateUserDto model)
    {
        isProcessing = true;
        try
        {
            var result = await UserApi.CreateUserAsync(model);
            ShowMessage(result.Message, result.Success);

            if (result.Success)
            {
                CloseCreateModal();
                await LoadData();
                // Clear task cache since user count might change
                userTasks.Clear();
                expandedUserIds.Clear();
            }
        }
        catch (Exception ex)
        {
            ShowMessage($"Error: {ex.Message}", false);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteUser(UserResponseDto user)
    {
        if (user.TaskCount > 0)
        {
            ShowMessage("Cannot delete user with assigned tasks", false);
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.Name}'?");
        if (confirmed)
        {
            try
            {
                var result = await UserApi.DeleteUserAsync(user.Id);
                ShowMessage(result.Message, result.Success);

                if (result.Success)
                {
                    await LoadData();
                    // Clear task cache for deleted user
                    userTasks.Remove(user.Id);
                    expandedUserIds.Remove(user.Id);
                }
            }
            catch (Exception ex)
            {
                ShowMessage($"Error: {ex.Message}", false);
            }
        }
    }
}